@page "/evidencia"
@using CurrieTechnologies.Razor.SweetAlert2
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<div class="card">
    <div class="card-header">
        <span>
            <h1>EVIDENCIAS</h1>
            <a class="btn btn-primary btn-sm float-end" href="/evidencia/create"><i class="bi bi-plus-circle" />Nueva evidencia</a>

        </span>
    </div>

    <div class="card-body">

        <GenericList MyList="evidencias">

            <Body>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Cronograma</th>
                            <th>Asistencia</th>
                            <th>Observaciones</th>
                            <th>Novedades</th>
                            <th>EvaluacionDiaria</th>
                            <th>ActividadesMensuales</th>
                            <th>EscalaEvaluacion</th>
                            <th>FechaDeEnvio</th>
                            <th>RepresentanteLegalId</th>
                            <th>MadreComunitariaId</th>

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in evidencias!)
                        {
                            <tr>


                                <td>
                                    @item.Cronograma
                                </td>
                                <td>
                                    @item.Asistencia
                                </td>
                                <td>
                                    @item.Observaciones
                                </td>
                                <td>
                                    @item.Novedades
                                </td>
                                <td>
                                    @item.EvaluacionDiaria
                                </td>
                                <td>
                                    @item.ActividadesMensuales
                                </td>
                                <td>
                                    @item.EscalaEvaluacion
                                </td>
                                <td>
                                    @item.FechaDeEnvio
                                </td>
                                 <td>
                                    @item.RepresentanteLegalId
                                </td>
                                <td>
                                    @item.MadreComunitariaId
                                </td>

                                


                                <td>
                                    <a href="/evidencia/edit/@item.Id" class="btn btn-sm btn-warning"><i class="bi bi-pencil-square" /> Editar</a>
                                    <button @onclick=@(() => DeleteAsycn(item)) class="btn btn-sm btn-danger"><i class="bi bi-trash-fill" /> Borrar</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </Body>
        </GenericList>
    </div>
</div>


@code {
    public List<Evidencia> evidencias { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<List<Evidencia>>("api/EvidenciasController");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        evidencias = responseHttp.Response;
    }



    private async Task DeleteAsycn(Evidencia evidencia)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Estas seguro de querer borrar la evidencia con Id: {evidencia.Id}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
            });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync<Evidencia>($"api/EvidenciasController/{evidencia.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/evidencia");
            }
            else
            {
                var mensajeError = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            return;
        }

        await LoadAsync();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }

}